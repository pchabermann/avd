---
# This workflow file is the template
# that will be triggered by specific container build workflows.

name: Reusable build container workflow

env:
  # BUILDX_NO_DEFAULT_ATTESTATIONS must be set to build only arm64 and amd64 images.
  # The devcontainers/ci@v0.3 build will fail if this env variable is not set.
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

on:
  workflow_call:
    inputs:
      # Container name, e.g. "base", "dev", etc.
      container_name:
        required: true
        type: string
      # Container tags, e.g. "latest,python3.11" or "latest,python3.11-avd4.1.0".
      # Container tags are optional as they are auto-generated if not provided.
      container_tags:
        required: false
        type: string
      # Platform, e.g. "linux/amd64", "linux/arm64/v8".
      # "default" is just fine if there is no intention to release a special build.
      platform:
        required: false
        type: string
        default: linux/arm64/v8,linux/amd64
      # From image, e.g. "python", "alpine", etc.
      # Currently we only support python-slim, so this is a future knob.
      from_image:
        required: false
        type: string
        default: python
      # From variant, e.g. "3.11-slim-bullseye".
      # This is auto-generated for python-slim based builds.
      # Only specify for special builds.
      from_variant:
        required: false
        type: string
      username:
        required: false
        type: string
        default: avd
      user_id:
        required: false
        type: string
        default: 1000
      group_id:
        required: false
        type: string
        default: 1000
      python_version:
        required: true
        type: string

jobs:
  build_image:
    runs-on: ubuntu-22.04
    steps:
      - name: Starting container build
        run: echo "Starting container build. Be patient. 🐢"
      - name: Checkout code ✅
        uses: actions/checkout@v4
      # Build image tags based on Python version and AVD version (if defined).
      # If container_tags is not defined, then image_tags will be auto-generated.
      # If container_tags is latest, it will be added to auto-generated image_tags.
      # If container_tags is defined and not latest, it will be used as-is.
      - name: Build image tags 🏷️
        id: build-tags
        run: |
          if [ -z "${{ inputs.container_tags }}" ]; then
            case ${{ inputs.container_name }} in
              base)
                echo "image_tags=python${{ inputs.python_version }}" >> $GITHUB_OUTPUT
                ;;
              dev)
                echo "image_tags=python${{ inputs.python_version }}" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "image_tags=python${{ inputs.python_version }}-avd-${{ github.ref_name }}" >> $GITHUB_OUTPUT
                ;;
            esac
          else
            if [ "${{ inputs.container_tags }}" == "latest" ]; then
              case ${{ inputs.container_name }} in
                base)
                  echo "image_tags=latest,python${{ inputs.python_version }}" >> $GITHUB_OUTPUT
                  ;;
                dev)
                  echo "image_tags=latest,python${{ inputs.python_version }}" >> $GITHUB_OUTPUT
                  ;;
                *)
                  echo "image_tags=latest,python${{ inputs.python_version }}-avd-${{ github.ref_name }}" >> $GITHUB_OUTPUT
                  ;;
              esac
            else
              echo "image_tags=${{ inputs.container_tags }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate from_image and from_variant parameters 🐍
        id: generate-from-parameters
        # Logic:
        # 1) Only python-slim images are supported at the moment.
        # 2) Base image must be built first from official python image.
        # 3) All other images will be built from the base image.
        # 4) "from_image" and "from_variant" can be passed transparently to the build step,
        #    but that is not implemented currently.
        run: |
          if [ "${{ inputs.from_image }}" == "python" ]; then
            if [ "${{ inputs.container_name }}" == "base" ]; then
              echo "from_image=${{ inputs.from_image }}" >> $GITHUB_OUTPUT
              echo "from_variant=${{ inputs.python_version }}-slim-bullseye" >> $GITHUB_OUTPUT
            else
              echo "from_image=ghcr.io/${{ github.repository }}/base" >> $GITHUB_OUTPUT
              echo "from_variant=python${{ inputs.python_version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "Only python-slim images are supported at the moment. Exiting."
            exit 1
          fi

      - name: Find ansible and pyavd install location
        id: find-install-locations
        run: |
          PYAVD_INSTALL_LOCATION="git+https://github.com/${{ github.repository }}.git@${{ github.ref_name }}#subdirectory=python-avd"
          ANSIBLE_INSTALL_LOCATION="git+https://github.com/${{ github.repository }}.git#/ansible_collections/arista/avd/,${{ github.ref_name }}"
          echo "ansible_install_location=$ANSIBLE_INSTALL_LOCATION" >> $GITHUB_OUTPUT
          echo "pyavd_install_location=$PYAVD_INSTALL_LOCATION" >> $GITHUB_OUTPUT

      # This check is temporarily deactivated, will be rewised in later PRs
      #
      # - name: Check if image is already present
      #   # this step will check if image was already pushed before to avoid re-writing
      #   # also if it's not a base image, this step will verify presence of the corresponding base image
      #   id: check-image-presence
      #   run: |
      #     echo "not_present=0" >> $GITHUB_OUTPUT
      #     for tag in $(echo ${{ steps.build-tags.outputs.image_tags }} | sed "s/,/ /g")
      #     do
      #       ( docker manifest inspect ghcr.io/${{ github.repository }}/${{ inputs.container_name }}:${tag} &>/dev/null ) || echo "not_present=1" >> $GITHUB_OUTPUT
      #     done
      #     # check if base image is present
      #     if [ "${{ inputs.container_name }}" != "base" ]; then
      #       echo "Verifying if base image is present..."
      #       docker manifest inspect ghcr.io/${{ github.repository }}/base:python${{ inputs.python_version }} >/dev/null
      #     fi

      - name: Setup QEMU for multi-arch builds 🏗️
        # if: ${{ steps.check-image-presence.outputs.not_present == '1' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ inputs.platform }}

      - name: Setup Docker buildX for multi-arch builds 🏗️
        # if: ${{ steps.check-image-presence.outputs.not_present == '1' }}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub 🗝️
        # if: ${{ steps.check-image-presence.outputs.not_present == '1' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-build dev container image 🔨
        # if: ${{ steps.check-image-presence.outputs.not_present == '1' }}
        uses: devcontainers/ci@v0.3
        env:
          FROM_IMAGE: ${{ steps.generate-from-parameters.outputs.from_image }}
          FROM_VARIANT: ${{ steps.generate-from-parameters.outputs.from_variant }}
          ANSIBLE_INSTALL_LOCATION: ${{ steps.find-install-locations.outputs.ansible_install_location }}
          PYAVD_INSTALL_LOCATION: ${{ steps.find-install-locations.outputs.pyavd_install_location }}
          USERNAME: ${{ inputs.username }}
          UID: ${{ inputs.user_id }}
          GID: ${{ inputs.group_id }}
        with:
          subFolder: containers/${{ inputs.container_name }}
          imageName: ghcr.io/${{ github.repository }}/${{ inputs.container_name }}
          imageTag: ${{ steps.build-tags.outputs.image_tags }}
          platform: ${{ inputs.platform }}
          push: always
